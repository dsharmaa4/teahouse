apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'

ext.profile = project.hasProperty('profile') ? project.getProperty('profile') : 'local' //./gradlew bootRun -Pprofile=profileName

dependencies {
    implementation project(':core')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.wavefront:wavefront-spring-boot-starter'

    compileOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.jolokia:jolokia-core'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar.manifest.attributes += jar.manifest.attributes

// Hack: Heroku removes the .git folder so gradle-git-properties fails, this task fakes the git.properties file
task generateGitPropertiesForHeroku(type: WriteProperties) {
    outputFile file("$buildDir/git.properties")
    properties([
        'git.branch': 'N/A',
        'git.commit.id.abbrev': abbreviatedCommitId,
        'git.commit.time': 'N/A'
    ])
}

processResources {
    filesMatching('build.properties') { it.expand(project.properties) }
    from(generateGitPropertiesForHeroku)
}

springBoot {
    buildInfo()
}

def commonjvmArgs = [
    '-server',
    // '-XX:+PrintFlagsFinal',
    '-XX:NativeMemoryTracking=summary',
    // '-XX:+UnlockDiagnosticVMOptions',
    // '-XX:+PrintNMTStatistics',
    '-XX:MinHeapSize=256M',
    '-XX:MaxHeapSize=256M',
    '-XX:MaxMetaspaceSize=256M',
    '-XX:MaxDirectMemorySize=256M',
    '-XX:+HeapDumpOnOutOfMemoryError',
    "-XX:HeapDumpPath=$rootDir/logs",
    "-Xlog:gc*:file=$rootDir/logs/$project.name-gc.log:time,uptime,pid,tid,level,tags:filecount=5,filesize=5M",

    '-Djava.security.egd=file:/dev/./urandom',
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8'
]

mkdir "$rootDir/logs"
bootRun {
    jvmArgs += commonjvmArgs + [
        "-Dspring.profiles.active=$profile",
        "-Dspring.application.home=$rootDir"
    ]
}

test {
    jvmArgs += commonjvmArgs + [
        "-Dspring.application.home=$rootDir"
    ]
}

task herokuStage {
    dependsOn assemble
    doLast {
        file("$rootDir/Procfile").text = "web: java -Dserver.port=\$PORT -Dspring.profiles.active=heroku -jar $project.name/${relativePath(bootJar.archiveFile)}"
    }
}

// Hack, see: generateGitPropertiesForHeroku task
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(herokuStage)) {
        generateGitProperties.enabled = false
    }
    else {
        generateGitPropertiesForHeroku.enabled = false
    }
}
